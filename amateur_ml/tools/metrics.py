#https://towardsdatascience.com/regression-an-explanation-of-regression-metrics-and-what-can-go-wrong-a39a9793d914
#https://www.youtube.com/watch?v=w2FKXOa0HGA

from math import sqrt,abs

def mse(predicted, expected):
    """
    A function to calculate mean sqaured error for a given mode based
    on the difference between the predicted value and expected value

    Args:
        predicted (list(float)): A list of the values predicted by a model
        expected (list(float)): A list of values that were expected from the model

    Returns:
        float: The calculated mean squared error
    """

    diff_sq  = [(i - j)**2 for i,j in zip(predicted,expected)] #a list of the sqaure of the difference between each predicted and expected value

    n = len(diff_sq)

    result = sum(diff_sq)/n
    
    return result

def rmse(predicted, expected):
    """
    A function to calculate root mean sqaured error for a given mode 
    based on the difference between the predicted value and expected value

    Args:
        predicted (list(float)): A list of the values predicted by a model
        expected (list(float)): A list of values that were expected from the model

    Returns:
        float: The calculated root mean squared error
    """
    
    result  = sqrt(mse(predicted,expected)) #takes the square root of the value generated by the mse function

    return result

def mae(predicted, expected):
    """
    A function to calculate mean absolute error for a given mode based
    on the difference between the predicted value and expected value

    Args:
        predicted (list(float)): A list of the values predicted by a model
        expected (list(float)): A list of values that were expected from the model

    Returns:
        float: The calculated mean absolute value
    """

    abs_diff  = [abs(i - j) for i,j in zip(predicted,expected)] #a list of the sqaure of the difference between each predicted and expected value

    n = len(abs_diff)

    result = sum(abs_diff)/n
    
    return result

def r2(predicted, expected):

    mean_expected = sum(expected)/len(expected)

    mean_expected = [mean_expected for _ in range(len(expected))]

    mse_mean = mse(mean_expected,expected)
    mse_model = mse(predicted, expected)

    result = 1 - (mse_model/mse_mean)

    return result

def ar2(predicted, expected, indpt_var_count = 1 ):

    n = len(expected)
    k = indpt_var_count

    result = 1 - (((n-1)/n-k-1)*(1-r2(predicted, expected)))

    return result